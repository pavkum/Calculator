main_exp = @exp#1;

@exp#1 = 1 + @exp#2 + 4 * @exp#3)

@exp#2 = 3 * Math.sqrt(4)

@exp#3 = 4 ^ @exp#4

@exp#4 = 5 + 3 * 2;

corresponding user expression = 1 + (3 * &radix; 4) + 4 + (4 ^ (5 + 3 * 2))


expressionManager - receives data and sends it to both display event and to active bodmosExpression
                  - issues clear recent
                  - issues clear all
                  - on receiving ( new bodmosExpression is created and its references is created and its reference is created in activeExpression
                    activeExpression is pushed to stack by making new expression as active
                  - on receiving ) closes active bodmos expression and pops last expression from stack
                  - final evaluation statement is built only pressing equals
                  - has a map to store bodmosExpressionIds and bodmosExpressions
                  
bodmosExpression - keeps on appending the user data | or , seperated.
                 - has complete and incomplete states , based on proper closure of brackets, however no brackets are appended
                 - no concept of parent - child. Pure work is based on referenceIds
                 - on receiving clear recent request - last word based on seperator is checked, if word is of type bodmosExpression, current expression
                   is pushed to stack and based on id corresponding expression is made active and its state changed to incomplete
                 - can contain functions
                 

@exp#2 is actually emitted as 3 * @func-sqrt{4}
                 